{"version":3,"sources":["utils.js","actions/index.js","Sidebar/Folder.js","Sidebar/Sidebar.js","Sidebar/SidebarContainer.js","SearchBar/SearchBar.js","SearchBar/SearchBarContainer.js","Chart/Chart.js","Chart/ChartContainer.js","ButtonGroup/ButtonGroup.js","constants.js","ButtonGroup/ButtonGroupContainer.js","StockTracker.js","App.js","serviceWorker.js","reducers/initialState.js","reducers/index.js","reducers/tickers.js","logic/updateDateRangeLogic.js","logic/searchTickerLogic.js","logic/index.js","configureStore.js","index.js"],"names":["getUrl","ticker","dateRange","concat","baseColors","mapTickerData","tickerData","key","map","dataPoint","addTicker","_ref","folder","color","data","type","Math","floor","random","length","setError","error","updateTickerRange","updateDate","date","updateDateRange","Folder","props","react_default","a","createElement","className","items","item","style","colors","backgroundColor","borderColor","onClick","handleClick","Sidebar","title","Sidebar_Folder","connect","state","ownProps","tickers","dispatch","deleteTicker","SearchBar","onSubmit","handleSubmit","htmlFor","name","onChange","handleChange","value","id","aria-describedby","placeholder","SearchBarContainer","event","target","toUpperCase","_this","setState","preventDefault","src_SearchBar_SearchBar","this","Component","Chart","keys","LineChart","width","height","XAxis","dataKey","YAxis","domain","Tooltip","CartesianGrid","stroke","strokeDasharray","Line","store","normalize","finalData","j","node","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","chartData","toFixed","err","return","push","getFormattedChartData","ButtonGroup","data-toggle","activeValue","values","dateRanges","1d","1m","3m","6m","ytd","dateRangeKeys","Object","StockTracker","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sidebarTitle","searchBarTitle","SearchBar_SearchBarContainer","searchTicker","toggleNormalize","ChartContainer","SidebarContainer","ButtonGroupContainer","App","src_StockTracker_0","Boolean","window","location","hostname","match","initialState","arguments","action","objectSpread","toConsumableArray","defineProperty","newState","filter","console","log","tickersData","_i","logic_updateDateRangeLogic","createLogic","debounce","latest","validate","allow","reject","getState","process","_ref2","isNewDate","_loop","fetch","then","res","json","result","warn","logic_searchTickerLogic","includes","logic","logicMiddleware","createLogicMiddleware","middleware","applyMiddleware","enhancer","compose","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee6b15bd.chunk.js","sourcesContent":["export const getUrl = (ticker, dateRange) => `https://api.iextrading.com/1.0/stock/${ticker}/chart/${dateRange}`;\r\n\r\nconst baseColors = [\r\n  \"#82ca9d\", \"#8084d8\", \"#8be07f\", \"#d884d4\",\r\n  \"#83b5ab\", \"#84d0d8\", \"#b284d8\", \"#d88684\"\r\n];\r\n\r\nexport const pickColor = () => {\r\n  return baseColors[Math.floor(Math.random() * baseColors.length)];\r\n}\r\n\r\nexport const mapTickerData = (tickerData, key) => {\r\n  return tickerData.map(dataPoint => dataPoint[key]);\r\n}","import { pickColor } from '../utils';\r\n\r\nexport const addTicker = ({ticker, folder, color, data}) => ({\r\n  type: 'ADD_TICKER',\r\n  color: color || pickColor(),\r\n  folder: folder || 'default',\r\n  ticker,\r\n  data\r\n});\r\n\r\nexport const clearData = () => ({\r\n  type: 'CLEAR_DATA'\r\n});\r\n\r\nexport const deleteTicker = ticker => ({\r\n  type: 'DELETE_TICKER',\r\n  ticker\r\n});\r\n\r\nexport const searchTicker = ticker => ({\r\n  type: 'SEARCH_TICKER',\r\n  ticker\r\n});\r\n\r\nexport const setError = error => ({\r\n  type: 'SET_ERROR',\r\n  error\r\n});\r\n\r\nexport const updateTickerRange = (ticker, data) => ({\r\n  type: 'UPDATE_TICKER_RANGE',\r\n  ticker,\r\n  data\r\n});\r\n\r\nexport const updateData = (data) => ({\r\n  type: 'UPDATE_DATA',\r\n  ...data\r\n});\r\n\r\nexport const updateDate = date => ({\r\n  type: 'UPDATE_DATE',\r\n  date\r\n});\r\n\r\nexport const updateDateRange = dateRange => ({\r\n  type: 'UPDATE_DATE_RANGE',\r\n  dateRange\r\n});\r\n\r\nexport const toggleNormalize = () => ({\r\n  type: 'TOGGLE_NORMALIZE'\r\n});\r\n","import React from 'react';\r\nimport './Sidebar.css';\r\n\r\nconst styleMaker = color => {\r\n  return {\"backgroundColor\": color, \"borderColor\": color, color: \"black\"};\r\n}\r\n\r\nconst Folder = props => {\r\n  return (\r\n    <div className=\"btn-group-vertical list\">\r\n      {props.items.map(item => {\r\n        return  (\r\n          <button className=\"btn btn-success\" style={styleMaker(props.colors[item])} key={item} onClick={() => props.handleClick(item)}>\r\n            {item}\r\n          </button>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Folder;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Folder from './Folder';\r\nimport './Sidebar.css';\r\n\r\nconst Sidebar = props => {\r\n  return (\r\n    <div className=\"sidebar-outline\">\r\n      <h3>{props.title}</h3>\r\n      <hr />\r\n      <Folder\r\n        colors={props.colors}\r\n        handleClick={props.handleClick}\r\n        items={props.items}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nSidebar.propTypes = {\r\n  colors: PropTypes.object.isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n  items: PropTypes.array.isRequired,\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Sidebar;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { deleteTicker } from '../actions';\r\nimport Sidebar from './Sidebar';\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  title: ownProps.title,\r\n  items: state.tickers,\r\n  colors: state.colors\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  handleClick: ticker => dispatch(deleteTicker(ticker)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst SearchBar = props => {\r\n  return (\r\n    <div className=\"search\">\r\n      <form className=\"form-inline\" onSubmit={props.handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"InputTicker\">{props.name}:</label>\r\n          <input\r\n            onChange={props.handleChange}\r\n            value={props.value}\r\n            name={props.name}\r\n            type=\"text\"\r\n            className=\"form-control mx-sm-2\"\r\n            id=\"InputTicker\"\r\n            aria-describedby=\"tickerHelp\"\r\n            placeholder=\"Enter Symbol\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n      <div className=\"error\">\r\n        {props.error || <span>&nbsp;&nbsp;</span>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport SearchBar from './SearchBar';\r\n\r\nclass SearchBarContainer extends Component {\r\n  state = {\r\n    value: \"\"\r\n  }\r\n\r\n  handleChange = event => {\r\n    const value = event.target.value.toUpperCase();\r\n    this.setState({value});\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    this.props.handleSubmit(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <SearchBar\r\n        error={this.props.error}\r\n        handleSubmit={this.handleSubmit}\r\n        handleChange={this.handleChange}\r\n        name={this.props.name}\r\n        value={this.state.value}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBarContainer;","// https://blog.logrocket.com/data-visualization-in-react-using-react-d3-c35835af16d0\r\nimport React from 'react';\r\nimport {LineChart, XAxis, YAxis, CartesianGrid, Line, Tooltip} from 'recharts';\r\nimport \"./Chart.css\";\r\n\r\nconst Chart = ({data, keys, colors}) => {\r\n  return (\r\n    <div className=\"chart\">\r\n      <LineChart width={800} height={500} data={data}>\r\n        <XAxis dataKey=\"date\"/>\r\n        <YAxis type=\"number\" domain={['auto', 'auto']} />\r\n        <Tooltip />\r\n        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\r\n        {keys && keys.map(key => <Line type=\"monotone\" dataKey={key} key={key} stroke={colors[key]} />)}\r\n      </LineChart>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart;\r\n","import { connect } from 'react-redux';\r\n\r\nimport Chart from './Chart';\r\n\r\nconst getFormattedChartData = store => {\r\n  const tickers = store.tickers;\r\n  const normalize = store.normalize;\r\n  const date = store.date;\r\n  let finalData = [];  \r\n  if (tickers && tickers.length > 0) {\r\n    const length = date.length;\r\n    for (let j=0; j < length; j++) {\r\n      const node = {date: date[j]};\r\n      for (let ticker of tickers) {\r\n        if (store.chartData[ticker].data.length === length) {\r\n          if (normalize) {\r\n            node[ticker] = (store.chartData[ticker].data[j]/store.chartData[ticker].data[0]).toFixed(4);\r\n          } else {\r\n            node[ticker] = store.chartData[ticker].data[j];\r\n          }\r\n        }\r\n      }\r\n      finalData.push(node);\r\n    }\r\n  }\r\n  return finalData;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  data: getFormattedChartData(state),\r\n  keys: state.tickers,\r\n  colors: state.colors\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Chart);\r\n","import React from 'react';\r\nimport './ButtonGroup.css';\r\n\r\nconst ButtonGroup = props => {\r\n  return (\r\n    <div className=\"date-range btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n      {\r\n        props.keys.map(key => {\r\n          return (\r\n            <button\r\n              className={`btn btn-outline-secondary ${props.activeValue === key ? \"active\":null}`}\r\n              key={key} \r\n              onClick={() => props.handleClick(key)}\r\n            >\r\n              {props.values[key]}\r\n            </button>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonGroup;\r\n","export const dateRanges = {\r\n  \"1d\": \"One Day\",\r\n  \"1m\": \"One Month\",\r\n  \"3m\": \"Three Months\",\r\n  \"6m\": \"Six Months\",\r\n  \"ytd\": \"Year to Date\",\r\n};\r\n\r\nexport const dateRangeKeys = Object.keys(dateRanges);\r\n","import { connect } from 'react-redux';\r\n\r\nimport { updateDateRange } from '../actions';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport {dateRanges, dateRangeKeys} from '../constants';\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  values: dateRanges,\r\n  keys: dateRangeKeys,\r\n  activeValue: state.dateRange\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  handleClick: dateRange => dispatch(updateDateRange(dateRange)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ButtonGroup);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SidebarContainer from './Sidebar/SidebarContainer';\r\nimport SearchBarContainer from './SearchBar/SearchBarContainer';\r\nimport ChartContainer from './Chart/ChartContainer';\r\nimport DateRangeButtonGroup from './ButtonGroup/ButtonGroupContainer';\r\nimport {\r\n  addTicker,\r\n  searchTicker,\r\n  setError,\r\n  updateDate,\r\n  updateTickerRange,\r\n  updateDateRange,\r\n  toggleNormalize\r\n} from './actions';\r\n\r\nimport \"./StockTracker.css\";\r\n\r\n\r\nclass StockTracker extends Component {\r\n  constructor() {\r\n    super();\r\n    this.sidebarTitle = \"Tickers Shown\";\r\n    this.searchBarTitle = \"Ticker\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"my-row\">\r\n          <SearchBarContainer\r\n            error={this.props.error}\r\n            handleSubmit={this.props.searchTicker}\r\n            name={this.searchBarTitle}\r\n          />\r\n          <button className=\"normalize btn btn-primary\" onClick={this.props.toggleNormalize}>\r\n            {this.props.normalize ? \"Unnormalize?\": \"Normalize?\"}\r\n          </button>\r\n        </div>\r\n        <div className=\"my-row\">\r\n          <ChartContainer />\r\n          <SidebarContainer\r\n            title={this.sidebarTitle}\r\n          />\r\n        </div>\r\n        <div className=\"my-row\">\r\n          <DateRangeButtonGroup />\r\n        </div>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStockTracker.propTypes = {\r\n  searchTicker: PropTypes.func.isRequired,\r\n  updateDate: PropTypes.func.isRequired,\r\n  updateDateRange: PropTypes.func.isRequired,\r\n  addTicker: PropTypes.func.isRequired,\r\n  toggleNormalize: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  tickers: state.tickers,\r\n  normalize: state.normalize,\r\n  dateRange: state.dateRange,\r\n  error: state.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTicker: tickerData => dispatch(addTicker(tickerData)),\r\n  searchTicker: ticker => dispatch(searchTicker(ticker)),\r\n  setError: error => dispatch(setError(error)),\r\n  toggleNormalize: () => dispatch(toggleNormalize()),\r\n  updateDate: date => dispatch(updateDate(date)),\r\n  updateDateRange: dateRange => dispatch(updateDateRange(dateRange)),\r\n  updateTickerRange: (ticker, data) => dispatch(updateTickerRange({ticker, data}))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StockTracker);\r\n","import React from 'react';\r\nimport StockTracker from './StockTracker';\r\n\r\nfunction App() {\r\n  return <StockTracker />\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = {\r\n  chartData: [],\r\n  colors: {},\r\n  normalize: false,\r\n  tickers: [],\r\n  date: [],\r\n  dateRange: \"1m\",\r\n  error: \"\"\r\n};\r\n\r\nexport default initialState;\r\n","import tickers from './tickers';\r\n\r\nexport default tickers;","import initialState from './initialState';\r\n\r\nconst tickers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TICKER':\r\n      return {\r\n        ...state,\r\n        tickers: [...state.tickers, action.ticker],\r\n        colors: {\r\n          ...state.colors,\r\n          [action.ticker]: action.color\r\n        },\r\n        chartData: {\r\n          ...state.chartData,\r\n          [action.ticker]: {\r\n            data: action.data,\r\n            folder: action.folder  \r\n          }\r\n        }\r\n      }\r\n    case 'CLEAR_DATA': {\r\n      const tickers = state.tickers;\r\n      const newState = {...state};\r\n      for (let ticker of tickers) {\r\n        newState.chartData[ticker].data = [];\r\n      }\r\n      return newState;\r\n    }\r\n    case 'SET_ERROR':\r\n      return {...state, error: action.error};\r\n    case 'DELETE_TICKER': {\r\n      const chartData = {\r\n        ...state.chartData\r\n      };\r\n      delete chartData[action.ticker];\r\n\r\n      const colors = {\r\n        ...state.colors\r\n      };\r\n      delete colors[action.ticker];\r\n\r\n      return {\r\n        ...state,\r\n        chartData,\r\n        colors,\r\n        tickers: state.tickers.filter(ticker => ticker !== action.ticker)\r\n      }\r\n    }\r\n    case 'UPDATE_TICKER_RANGE': {\r\n      const newState = {...state};\r\n      newState.chartData[action.ticker].data = action.data;\r\n      return newState;\r\n    }\r\n    case 'UPDATE_DATA': {\r\n      console.log(action);\r\n      const newState = {...state};\r\n      newState.date = action.date;\r\n      const tickers = Object.keys(action.tickersData);\r\n      for (let ticker of tickers) {\r\n        newState.chartData[ticker] = action.tickersData[ticker]\r\n      };\r\n      return newState;\r\n    }\r\n    case 'UPDATE_DATE':\r\n      return {\r\n        ...state,\r\n        date: action.date\r\n      }\r\n    case 'UPDATE_DATE_RANGE':\r\n      return {\r\n        ...state,\r\n        dateRange: action.dateRange\r\n      }\r\n    case 'TOGGLE_NORMALIZE':\r\n      return {\r\n        ...state,\r\n        normalize: !state.normalize\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default tickers;\r\n","import { createLogic } from 'redux-logic';\r\nimport { updateDate, updateTickerRange, clearData } from '../actions';\r\nimport { getUrl, mapTickerData } from '../utils';\r\n\r\nexport const updateDateRangeLogic = createLogic({\r\n  type: 'UPDATE_DATE_RANGE',\r\n  debounce: 500, /* ms */\r\n  latest: true,  /* take latest only */\r\n\r\n  validate({ getState, action }, allow, reject) {\r\n    allow(action);\r\n  },\r\n\r\n  process({ getState, action }, dispatch, done) {\r\n    const state = getState();\r\n    let isNewDate = true;\r\n    const tickers = state.tickers;\r\n    if (tickers.length > 0) {\r\n      dispatch(clearData());\r\n    }\r\n    for (let ticker of tickers) {\r\n      // Make API call\r\n      fetch(getUrl(ticker, action.dateRange))\r\n        .then(res => res.json())\r\n        .then(\r\n          result => {\r\n            // Massage Data\r\n            if (isNewDate) {\r\n              const date = mapTickerData(result, \"date\");\r\n              dispatch(updateDate(date));\r\n              isNewDate = false;\r\n            }\r\n            \r\n            const tickerData = mapTickerData(result, \"close\");\r\n            dispatch(updateTickerRange(ticker, tickerData));\r\n          },\r\n          error => {\r\n            console.warn(error);\r\n          }\r\n        );\r\n      }\r\n    }\r\n});\r\n\r\nexport default [\r\n  updateDateRangeLogic\r\n];\r\n","import { createLogic } from 'redux-logic';\r\nimport { updateDate, setError, addTicker } from '../actions';\r\nimport { getUrl, mapTickerData } from '../utils';\r\n\r\nexport const searchTickerLogic = createLogic({\r\n  type: 'SEARCH_TICKER',\r\n  debounce: 500, /* ms */\r\n  latest: true,  /* take latest only */\r\n\r\n  process({ getState, action }, dispatch, done) {\r\n    const state = getState();\r\n    const tickers = state.tickers;\r\n    const dateRange = state.dateRange;\r\n    const ticker = action.ticker;\r\n    let isNewDate = true;\r\n    if (tickers.includes(ticker)) {\r\n      dispatch(setError(`${ticker} already displayed.`)).then(done);\r\n    } else {\r\n      dispatch(setError(null));\r\n      fetch(getUrl(ticker, dateRange))\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          // Massage Data\r\n          const tickerData = mapTickerData(result, \"close\");\r\n          if (isNewDate) {\r\n            const date = mapTickerData(result, \"date\");\r\n            dispatch(updateDate(date));\r\n            isNewDate = false;\r\n          }\r\n          \r\n          dispatch(addTicker({ticker, data: tickerData}));\r\n        },\r\n        error => {\r\n          console.warn(error);\r\n          dispatch(setError(`Could not find ticker: ${ticker}`));\r\n        }\r\n      ).then(done);\r\n    }\r\n  }\r\n});\r\n\r\nexport default [\r\n  searchTickerLogic\r\n];\r\n","import updateDateRange from './updateDateRangeLogic';\r\nimport searchTicker from './searchTickerLogic';\r\n\r\nexport default [\r\n  ...updateDateRange,\r\n  ...searchTicker\r\n];","import { compose, createStore, applyMiddleware } from 'redux';\r\nimport { createLogicMiddleware } from 'redux-logic';\r\nimport rootReducer  from './reducers';\r\nimport logic  from './logic';\r\n\r\nconst logicMiddleware = createLogicMiddleware(logic);\r\n\r\nconst middleware = applyMiddleware(\r\n  logicMiddleware\r\n);\r\n\r\n// using compose to allow for applyMiddleware, just add it in\r\nconst enhancer = compose(\r\n  middleware,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    enhancer\r\n  );\r\n  return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}